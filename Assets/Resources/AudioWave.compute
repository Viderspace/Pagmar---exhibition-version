// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;


RWBuffer<float> audioData;

uint size = 512;
float lineWidth = 3;
float amp = 1;
float4 lineColor = float4(1,1,1,1);

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    const float x1 = (float)(id.x - 1);
    const float x2 = (float)(id.x + 1);
    const float y1 = (audioData[(int)x1] * size * amp ) + size / 2;
    const float y2 = (audioData[(int)x2] * size * amp) + size / 2;
    const float m = (y1 - y2) / (x1 - x2);
    const float n = y1 - m * x1;

    const float dist = abs(m * (float)id.x - (float)id.y + n) / sqrt(m * m + 1);
    const bool isCloseEnoughToLine = dist <= lineWidth && abs(m) < 200 && abs(m) > 0.00001;

    // const float ceil = (1 + amp) * size / 2;
    // const float floor = (1 + -amp) * size / 2;
    const bool outsideBounds = id.x <= 0 || id.x >= size - 1 || id.y <= 0 || id.y >= size - 1;

    if (outsideBounds)
    {
        Result[id.xy] = float4(0, 0, 0, 0);
        return;
    }

    const bool audioIsSilent = amp <= 0.1;

    if (audioIsSilent)
    {
        // if (id.y - size / 2 < lineWidth && id.y - size / 2 > -lineWidth)
        if ( abs(id.y - size / 2) <= lineWidth)
        {
            Result[id.xy] = lineColor; //  line color
        }
        else
        {
            Result[id.xy] = float4(0, 0, 0, 0); // Black background
        }
        return;
    }

    if (isCloseEnoughToLine)
    {
        Result[id.xy] = lineColor; //  line color
    }
    else
    {
        Result[id.xy] = float4(0, 0, 0, 0); // Black background
    }
}
